import { dbConnect } from "@/app/lib/dbConnect";
import Product from "@/app/models/Product";
import User from "@/app/models/User";
import { NextResponse } from "next/server";
import jwt from "jsonwebtoken";
import { getSession } from "@/app/lib/auth";

export async function POST(request) {
  const session = await getSession();
  try {
   await dbConnect();

    // Get user
    const user = await User.findById(session.user._id).select("-password");
    if (!user) {
      return NextResponse.json(
        { success: false, message: "User not found" },
        { status: 404 }
      );
    }

    // Validate input
    const body = await request.json();
    // console.log(body);
    if (!body.name || !body.category || !body.price) {
      return NextResponse.json(
        { success: false, message: "Missing required fields (name, category, price)" },
        { status: 400 }
      );
    }

    // ========== NEW PRODUCT CODE GENERATION LOGIC ==========
    // Find the last product to determine next code
    const lastProduct = await Product.findOne().sort({ productCode: -1 }).limit(1);
    
    let nextProductCode;
    if (!lastProduct) {
      // If no products exist, start with PRO_0001
      nextProductCode = "PRO_0001";
    } else {
      // Extract number from last code and increment
      const lastCodeNumber = parseInt(lastProduct.productCode.split('_')[1]);
      const nextNumber = lastCodeNumber + 1;
      nextProductCode = `PRO_${nextNumber.toString().padStart(4, '0')}`;
    }
    // ========== END OF NEW LOGIC ==========


    // Create product
    const productData = new Product({
      ...body,
      creatorId: user._id,
      productCode: nextProductCode, // Now setting it explicitly
      // productCode will be auto-generated by pre-save hook
    });
    // console.log("rebuuild",product);

    const product = new Product(productData);
    await product.save();

    return NextResponse.json(
      { success: true, data: product },
      { status: 201 }
    );
    
  } catch (error) {
    if (error.code === 11000) {
      return NextResponse.json(
        { error: 'Duplicate product code' },
        { status: 400 }
      );
    }
    return NextResponse.json(
      { error: 'Internal server error', details: error.message },
      { status: 500 }
    );
  }
}


export async function GET(request) {
  const session = await getSession();
  // console.log('product page',session);
  try {
    await dbConnect();
     // Check if user is authenticated
  if (!session) {
    return NextResponse.json(
      { error: 'Unauthorized' },
      { status: 401 }
    );
  }

  const products = await Product.find({ creatorId: session.user._id });
  console.log(products)

  return NextResponse.json(
      { 
        success: true, 
        count: products.length, 
        data: products 
      },
      { status: 200 }
    );
  } catch (error) {
    return NextResponse.json(
      { 
        error: 'Something else',
        details: error.message 
      },
      { status: 500 }
    );
  }
}